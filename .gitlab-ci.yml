image: ${CODE_REGISTRY}/devops/images/usgs/ng-cli-e2e:latest

include:
  - project: 'ghsc/hazdev/pipeline-build-template'
    ref: '1.1.5'
    file: 'templates/library.yml'
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - install
  - test
  - build
  - deploy

variables:
  CI_REGISTRY: ${CODE_REGISTRY}
  CI_REGISTRY_IMAGE: ${CODE_REGISTRY_IMAGE}
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: ${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}


## --------------------------------------------------
# Templates
## --------------------------------------------------

.adjust_image_names:
  before_script:
    - IMAGE_NAME=${IMAGE_NAME/:master/:latest}
    - INTERNAL_IMAGE_NAME=${CI_REGISTRY_IMAGE}/${IMAGE_NAME}

.deploy:
  cache: {}
  extends:
    - .adjust_image_names
  image: ${CODE_REGISTRY}/ghsc/hazdev/container-deploy:latest
  parallel:
    matrix:
      - APP_NAME: earthquake-eventpages
        BASE_HREF: earthquakes/eventpage
        EVENT_TYPE: actual
        STACK_NAME: earthquake-eventpages
      - APP_NAME: scenario-eventpages
        BASE_HREF: scenarios/eventpage
        EVENT_TYPE: scenario
        STACK_NAME: scenario-eventpages
  script:
    - export REGISTRY=${CI_REGISTRY_IMAGE}
    - cp -v
      /container-deploy/default.config.sh
      /container-deploy/default.funcs.sh
      /container-deploy/deploy.sh
      scripts/.
    - scripts/deploy.sh
  stage: deploy
  tags:
    - deploy
    - swarm



## --------------------------------------------------
# install Stage
## --------------------------------------------------

Node Modules Installation:
  artifacts:
    paths:
      - node_modules
    expire_in: 1 day
  stage: install
  script:
    - npm ci
  tags:
    - development


## --------------------------------------------------
# Test Stage
## --------------------------------------------------

End to End Tests:
  script:
    # download version of chromedriver that matches installed version of chrome
    - npx webdriver-manager update --versions.chrome=$(google-chrome --version | grep Chrome | awk '{ print $3}')
    - npm run e2e
  stage: test
  tags:
    - development

Lint:
  script:
    - npm run lint
  stage: test
  tags:
    - development

Static Vulnerabilities:
  allow_failure: true # fails due to outdated angular version
  image: ${CODE_REGISTRY}/devops/images/usgs/node:12
  script:
    - npm audit
  stage: test
  tags:
    - development

Unit Test Application:
  artifacts:
    reports:
      cobertura: coverage/cobertura-coverage.xml
  script:
    - npm run test:ci
  stage: test
  tags:
    - development

Build Production:
  script:
    - npm run build
  stage: test
  tags:
    - development


## --------------------------------------------------
# Build Stage
## --------------------------------------------------

Build Docker Image:
  extends:
    - .adjust_image_names
    - .build
  image: ${DEVOPS_REGISTRY}docker:19.03-git
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'ghsc/hazdev'
      when: on_success
    - when: never
  services:
    - name: ${DEVOPS_REGISTRY}docker:19.03-dind
      alias: docker
  stage: build
  variables:
    DOCKER_BUILD_ARGS: |
      BUILD_IMAGE=${CODE_REGISTRY}/devops/images/usgs/node:12
      DOCKER_IMAGE=${IMAGE_NAME}
      FROM_IMAGE=${CODE_REGISTRY}/devops/images/usgs/nginx:latest
      GIT_BRANCH_NAME=${CI_COMMIT_REF_NAME}
      GIT_COMMIT_SHA=${CI_COMMIT_SHA}


## --------------------------------------------------
# Deploy Stage
## --------------------------------------------------

Production01:
  extends:
    - .deploy
    - .production-manual
  tags:
    - deploy
    - swarm
    - production01

Production02:
  extends:
    - .deploy
    - .production-manual
  tags:
    - deploy
    - swarm
    - production02

Staging01:
  extends:
    - .deploy
    - .staging
  tags:
    - deploy
    - swarm
    - staging01

Staging02:
  extends:
    - .deploy
    - .staging
  tags:
    - deploy
    - swarm
    - staging02
