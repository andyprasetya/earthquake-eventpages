image: ${CODE_REGISTRY}/devops/images/trion/ng-cli-e2e:node10

include:
  - project: 'ghsc/hazdev/pipeline-build-template'
    ref: 'master'
    file: 'templates/library.yml'
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - test
  - build
  - deploy

variables:
  CI_REGISTRY: ${CODE_REGISTRY}
  CI_REGISTRY_IMAGE: ${CODE_REGISTRY_IMAGE}
  IMAGE_NAME: ${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}


## --------------------------------------------------
# Templates
## --------------------------------------------------

.adjust_image_names:
  before_script:
    - IMAGE_NAME=${IMAGE_NAME/:master/:latest}
    - INTERNAL_IMAGE_NAME=${CI_REGISTRY_IMAGE}/${IMAGE_NAME}

.deploy:
  cache: {}
  extends:
    - .adjust_image_names
  image: ${CODE_REGISTRY}/ghsc/hazdev/container-deploy:latest
  script:
    - export REGISTRY=${CI_REGISTRY_IMAGE}
    - cp -v
      /container-deploy/default.config.sh
      /container-deploy/default.funcs.sh
      /container-deploy/deploy.sh
      scripts/.
    - scripts/deploy.sh
  stage: deploy
  tags:
    - deploy
    - swarm
  variables:
    APP_NAME: earthquake-eventpages
    STACK_NAME: earthquake-eventpages-dev

.install:
  before_script:
    - npm ci

.staging01:
  tags:
    - staging01

.staging02:
  tags:
    - staging02

.production01:
  tags:
    - production01

.production02:
  tags:
    - production02

.staging-when:
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'ghsc/hazdev' && $CI_COMMIT_REF_NAME == 'master'
      when: on_success
    - if: $CI_PROJECT_NAMESPACE == 'ghsc/hazdev' && $CI_COMMIT_TAG && $CI_COMMIT_TAG != ''
      when: on_success
    - when: manual
      allow_failure: true
  

## --------------------------------------------------
# Test Stage
## --------------------------------------------------

# End to End Tests:
#   extends:
#     - .install
#   script:
#     - npx webdriver-manager update --versions.chrome=2.41 --gecko false
#     - npm run e2e -- --webdriver-update false
#   stage: test
#   tags:
#     - development
#   when: manual

# Lint:
#   extends:
#     - .install
#   script: npm run lint
#   stage: test
#   tags:
#     - development

# Static Vulnerabilities:
#   allow_failure: true # will fail due to outdated angular version
#   image: ${CODE_REGISTRY}/devops/images/usgs/node:12
#   extends:
#     - .install
#   script: npm audit
#   stage: test
#   tags:
#     - development

# Unit Test Application:
#   artifacts:
#     reports:
#       cobertura: coverage/cobertura-coverage.xml
#   extends:
#     - .install
#   script:
#     - npm run test:ci
#   stage: test
#   tags:
#     - development

# Build Production:
#   extends:
#     - .install
#   script:
#     - npm run build
#   stage: test
#   tags:
#     - development


## --------------------------------------------------
# Build Stage
## --------------------------------------------------

# Build Docker Image:
#   extends:
#     - .adjust_image_names
#     - .build
#   stage: build
#   variables:
#     DOCKER_BUILD_ARGS: |
#       BUILD_IMAGE=${CODE_REGISTRY}/devops/images/usgs/node:12
#       FROM_IMAGE=${CODE_REGISTRY}/devops/images/usgs/nginx:latest
#       GIT_BRANCH_NAME=${CI_COMMIT_REF_NAME}
#       GIT_COMMIT_SHA=${CI_COMMIT_SHA}
#       DOCKER_IMAGE=${IMAGE_NAME}


## --------------------------------------------------
# Deploy Stage
## --------------------------------------------------

# Production01:
#   extends:
#     - .deploy
#     - .production
#     - .production01

# Production02:
#   extends:
#     - .deploy
#     - .production
#     - .production02

Staging01:
  extends:
    - .deploy
    - .staging
    - .staging01
    - .staging-when

Staging02:
  extends:
    - .deploy
    - .staging
    - .staging02
    - .staging-when
